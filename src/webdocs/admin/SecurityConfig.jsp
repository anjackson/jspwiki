<%@ page import="java.security.Principal" %>
<%@ page import="org.apache.log4j.*" %>
<%@ page import="org.jdom.Document" %>
<%@ page import="com.ecyrd.jspwiki.*" %>
<%@ page import="com.ecyrd.jspwiki.auth.*" %>
<%@ page import="org.apache.commons.lang.time.StopWatch" %>
<%@ page errorPage="/Error.jsp" %>
<%@ taglib uri="/WEB-INF/jspwiki.tld" prefix="wiki" %>
<%! 
    public void jspInit()
    {
        wiki = WikiEngine.getInstance( getServletConfig() );
        verifier = new SecurityVerifier( wiki );
    }
    Logger log = Logger.getLogger("JSPWiki"); 
    WikiEngine wiki;
    SecurityVerifier verifier;

%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
  <title>JSPWiki Security Configuration Verifier</title>
</head>
<body>

<h1>Security Configuration Verifier</h1>
<p>This page examines JSPWiki's security configuration and tries to determine if it is working the way it should. Although JSPWiki comes configured with some reasonable default configuration settings out of the box, it's not always obvious what settings to change if you need to customize the security... and sooner or later, just about everyone does.</p>
<p>This page is dynamically generated by JSPWiki. It examines the authentication, authorization and security policy settings. When we think something looks funny, we'll try to communicate what the issue might be, and will make recommendations on how to fix the problem.</p>

<!-- 
  *********************************************
  **** A U T H E N T I C A T I O N         ****
  *********************************************
-->
<h2>Authentication</h2>
<!-- 
  *********************************************
  **** Container Authentication Verifier   ****
  *********************************************
-->
<h3>Container-Managed Authentication</h3>
<%
  boolean isContainerAuth = wiki.getAuthenticationManager().isContainerAuthenticated();
  AuthorizationManager authorizationManager = wiki.getAuthorizationManager();
  if ( isContainerAuth )
  {
%>
    <!-- We are using container auth -->
    <p>I see that you've configured container-managed authentication. Very nice.</p>
<%
  }
  else
  {
%>
    <!-- We are not using container auth -->
    <p>Container-managed authentication appears to be disabled, according to your <code>WEB-INF/web.xml</code> file.</p>
<%
  }
%>

    
<!-- 
  *********************************************
  **** JAAS Authentication Config Verifier ****
  *********************************************
-->
<h3>JAAS Login Configuration</h3>
<!-- Notify users which JAAS configs we need to find -->
<p>JSPWiki uses JAAS to define the authentication process. We need to be able to locate a JAAS configuration file. The default location is <code>WEB-INF/jspwiki.jaas</code>).</p>
 
<h4>JAAS Configuration File</h4>
<p>Based on the value of the <code>java.security.auth.login.config</code> system property, JSPWiki&#39;s current JAAS configuration file seems to be here:</p>
<blockquote>
  <code><%=verifier.jaasProperty()%></code>
</blockquote>
<%
  if ( verifier.jaasConfigurationFile().exists() )
  {
    %>
      <p>File <code><%=verifier.jaasProperty()%></code> exists in the filesystem. Good.</p>
    <%
  }
  else
  {
    %> 
      <p class="error">File <code>" + verifier.jaasProperty() + "</code> does not exist in the filesystem. This is very very bad.</p>
    <%
  }
%>

<!-- Let the admin know if something other than JSPWiki set the config property first -->
<%
  if ( verifier.isJaasConfiguredAtStartup() )
  {
%>
    <p class="warn">Note: some other application set the JAAS <code>java.security.auth.login.config</code> system property before JSPWiki started up. It could have been done by a prior installation of JSPWiki, or possibly by your web container's startup script. This is not necessary a bad thing, but we thought you should be aware of it in case you are seeing behavior you don't expect. You can ignore this message if we find the JAAS login configurations (below).</p>
<%
  }
  else
  {
%>
    <p class="info">Note: this instance of JSPWiki set the system property at startup.</p>
<%
  }
%>

<!-- Print JAAS configuration status -->
<h4>JAAS Login Configuration Entries</h4>
<p>Inside the JAAS config file, we must be able to find two login configurations: <code>JSPWiki-container</code> and <code>JSPWiki-custom</code>.</p>
<%=verifier.jaasConfigurationStatus()%>
<%
  if ( !verifier.isJaasConfigured() )
  {
%>
    <p class="error"The JAAS configuration looks broken. Users may not be able to log in. You should be able to fix this by locating the JAAS configuration file and appending the contents of <code>WEB-INF/jspwiki.jaas</code>.</p>
<%
  }
%>

<!-- 
  *********************************************
  **** A U T H O R I Z A T I O N           ****
  *********************************************
-->
<h2>Authorization</h2>

<!-- 
  *********************************************
  **** Container Authorization Verifier    ****
  *********************************************
-->
<h3>Container-Managed Authorization</h3>
<%
  if ( isContainerAuth )
  {
%>
    <!-- We are using container auth -->
    <p>I see that you've configured container-managed authorization. Very nice.</p>

    <h4>Container Roles</h4>
<%
      Principal[] roles = verifier.webContainerRoles();
      if ( roles.length > 0 )
      {
%>
        <!-- Even better, we are using the standard authorizer, which
             allows us to identify the roles the container knows about -->
        <p>Your <code>WEB-INF/web.xml</code> file defines the following roles:</p>
        <ul>
<%
          for( int i = 0; i < roles.length; i++ )
          {
%>
            <li><%=roles[i].getName()%></li>
<%
          }
%>
        </ul>
        
        <h4>Role Restrictions</h4>
        <p>Here is how your web container will control role-based access to some common JSPWiki actions and their assocated JSPs. These restrictions will be enforced even if your Java security policy is more permissive.</p>

        <!-- Print table showing role restrictions by JSP -->
        <%=verifier.containerRoleTable()%>

        <!-- Remind the admin their container needs to return the roles -->
        <p>Note that your web container will allow access to these pages <em>only</em> if your container's authentication realm returns the roles
<%
          for( int i = 0; i < roles.length; i++ )
          {
%>
            &nbsp;<strong><%=(roles[i].getName() + (i<(roles.length-1)?",":""))%></strong><%
          }
%>. If your container's realm returns other role names, users won't be able to access the pages they should be allowed to see -- because the role names don't match. In that case, You should adjust the <code>&lt;role-name&gt;</code> entries in <code>web.xml</code> appropriately to match the role names returned by your container's authorization realm.</p>
<%
      }
      else
      {
%>
        <!-- Not using WebContainerAuthorizer, so we can't eval constraints -->
        <p class=\"error\">You don't seem to be using <code>WebContainerAuthorizer</code>. This is not necessarily bad, but it means that we can't examine your container roles.</p>
<%
      }
    }
    else
    {
%>
      <!-- We are not using container auth -->
      <p>Container-managed authorization appears to be disabled, according to your <code>WEB-INF/web.xml</code> file.</p>
<%
    }
%>


<!-- 
  *********************************************
  **** Java Security Policy Verifier       ****
  *********************************************
-->
<h3>Security Policy</h3>
<p>JSPWiki's authorizes user actions by consulting a standard Java 2 security policy file. By default, JSPWiki installs its standard policy file at startup time by setting the system property.<code>java.security.policy</code> and then refreshing the system policy. However, because many application servers and other Java applications sometimes also set their own policies, JSPWiki will respect the system property if it is already set.</p>

<h4>Java Security Policy File</h4>
<p>Based on the current value of the <code>java.security.policy</code> system property, your security policy file seems to be here:</p>
<blockquote>
  <code><%=verifier.securityPolicyProperty()%></code>
</blockquote>
<%
  if ( verifier.securityPolicyFile().exists() )
  {
    %> 
      <p>File <code><%=verifier.securityPolicyProperty()%></code> exists in the filesystem. Good.</p>
    <%
  }
  else
  {
    %> 
      <p class="error">File <code>" + verifier.securityPolicyProperty() + "</code> does not exist in the filesystem. This is very very bad.</p>
    <%
  }
%>

<!-- Let the admin know if something other than JSPWiki set the policy first -->
<%
  if ( verifier.isSecurityPolicyConfiguredAtStartup() )
  {
%>
    <p class="warn">Note: some other application set the <code>java.security.policy</code> system property before JSPWiki started up. It could have been done by a prior installation of JSPWiki, or possibly by your web container's startup script. This is not necessary a bad thing, but we thought you should be aware of it in case you are seeing behavior you don't expect. You can ignore this message if our policy checks are all working ok (below).</p>
<%
  }
  else
  {
%>
    <p class="info">Note: this instance of JSPWiki set the system property at startup.</p>
<%
  }
%>

<h4>Policy File Validation</h4>
<p>Now we are going to validate the security policy file. To do this, we parse
the security policy and examine each <code>grant</code> block. If we see
a <code>permission</code> entry that is signed, we verify that the certificate
alias exists in our keystore. The keystore itself must also exist in the file system.
And as an additional check, we will try to load each <code>Permission</code> class into memory to verify that JSPWiki's classloader can find them.</p>

<p>JSPWiki's Policy file parser is stricter than the default parser that ships with the JVM. If you encounter parsing errors, make sure you have the correct comma and semicolon delimiters in your policy file <code>grant</code> entries. The <code>grant</code> blocks must follow this format:</p>
<blockquote>
  <pre>grant signedBy "signer_names", codeBase "URL",
    principal principal_class_name "principal_name",
    principal principal_class_name "principal_name",
    ... {
    
    permission permission_class_name "target_name", "action";
    permission permission_class_name "target_name", "action";
};</pre>
</blockquote>

<p>Note: JSPWiki versions prior to 2.4.6 accidentally omitted commas after the <code>signedBy</code> entries, so you should fix this if you are using a policy file based on a version earlier than 2.4.6.</p>

<%=verifier.securityPolicyStatus()%>

<h4>Policy Permissions</h4>
<p>Now comes the <em>really</em> fun part. Using the current security policy, we will test the PagePermissions each JSPWiki role possesses for a range of pages. The roles we will test include the standard JSPWiki roles (Authenticated, All, etc.) plus any others you may have listed in the security policy. In addition to the PagePermissions, we will also test the WikiPermissions. The results of these tests should tell you what behaviors you can expect based on your security policy file. If we had problems finding, parsing or verifying the policy file, these tests will likely fail.</p>
<%
  if ( isContainerAuth )
  {
%>
    <p>Note: because you are using container-managed security, constraints on user activities might be stricter than what is shown in this table. If the container requires that users accessing <code>Edit.jsp</code> possess the container role "Admin," for example, this will override an "edit" PagePermission granted to role "Authenticated."</p>
<%
  }
%>


<%=verifier.policyRoleTable()%>

</body>
</html>
