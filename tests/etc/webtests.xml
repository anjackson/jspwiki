<project name="JSPWiki-webtests" basedir="tests">

  <!-- This Ant build file is designed to be called by the
       "webtest-setup" macro in the top-level build.xml file.
       If executed by itself, it will fail horribly and make
       many unpleasant noises. It runs tests against a Tomcat 
       web application server running on port ${tomcat.port}.
       
       The tests require a few properties to be defined 
       by the calling Ant script:
       
         webtest.context:  The webapp context that will be tested.
                           This will be something like
                           'test-custom' or 'test-container'.
         webtest.props:    The jspwiki.properties file to use for the test.
         webtest.webxml:   The web.xml file to use for the test.
                       
       The test scripts are written using JMeter, and reside
       in tests/com/ecyrd/jspwiki/web.
       
       For those of you following along at home, there are
       some fairly black-belt Ant tricks in here,
       notably the code that packages up the web contexts.  -->
       
  <!-- The main target. Calls the init target and deploys webapp, 
       tearing down previous version if needed -->
  <target name="webtest-setup">
    <echo message="===============================================================" />
    <echo message=" Setting up web unit tests for '${webtest.context}'" />
    <echo message="- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" />
    <echo message="To run web tests, we assume:" />
    <echo message="  1) JMeter is installed on your local machine at ${@jmeter.home@}" />
    <echo message="  2) Tomcat is on ${tomcat.host} and listens for requests on port ${tomcat.port}." />
    <echo message="  3) The Manager webapp is installed." />
    <echo message="  4) User '${tomcat.admin}' possesses the 'manager' role (so it can install webapps)" />
    <echo message="  5) The JDBC driver jar that you are using to test with is in Tomcat's " />
    <echo message="     common/lib/directory on the server." />
    <echo message="We will verify that conditions 1-4 hold, and will try to infer #5." />
    <echo message="Note: the defaults we use are stored in ${basedir}/build.properties." />
    <echo message="" />

    <echo message="Verifying JMeter home directory..." />
    <fail message="JMeter home directory property @jmeter.home@ isn't set!" unless="@jmeter.home@" />
    <fail message="JMeter home directory ${@jmeter.home@} does not exist!" >
      <condition>
        <not>
          <available file="${@jmeter.home@}" />
        </not>
      </condition>
    </fail>
    
    <echo message="Checking to see if Tomcat is running..." />
    <fail message="Tomcat doesn't seem to be running. Start it first! (For example, run $CATALINA_HOME/bin/startup.sh)">
      <condition>
        <not>
          <http url="${tomcat.protocol}://${tomcat.host}:${tomcat.port}" />
        </not>
      </condition>
    </fail>
    
    <echo message="Checking to see if the Manager app is running..." />
    <fail message="The manager app doesn't seem to be running! For Tomcat 5.5 and higher, it should be in $CATALINA_HOME/server/webapps/manager.">
      <condition>
        <not>
          <http url="${tomcat.protocol}://${tomcat.host}:${tomcat.port}/manager/html" errorsBeginAt="404" />
        </not>
      </condition>
    </fail>
    
    <echo message="Undeploying old webapp... (might return an error, which is ok)"/>
    <tomcat-undeploy context="${webtest.context}" />
    <echo message="Deploying webapp..."/>
    <tomcat-deploy context="${webtest.context}"
                    webxml="${webtest.webxml}"
                     props="${webtest.props}" />
                     
    <waitfor maxwait="30" maxwaitunit="second" timeoutproperty="webapp.not.installed">
      <http url="${tomcat.protocol}://${tomcat.host}:${tomcat.port}/${webtest.context}/Wiki.jsp" />
    </waitfor>
    <fail if="webapp.not.installed" message="The webapp wasn't deployed for some reason. If [deploy] returned an HTTP 403 response, it usually means the manager user '${tomcat.admin}' isn't allowed to access the Manager app. Check $CATALINA_HOME/conf/tomcat-users.xml, and make sure the user '${tomcat.admin}' possesses the role 'manager'. If the 'test-custom-*' and 'test-absolute' webapps deployed ok, but the 'test-*-jdbc' webapps did not, then Tomcat probably can't find your JDBC jar file, so you should copy it (example: ${basedir}/lib/hsqldb.jar) to $CATALINA_HOME/common/lib and restart Tomcat.">
    </fail>
    
  </target>
    
  <!-- Tears down the web tests -->
  <target name="webtest-teardown" if="webtest.teardown">
    <tomcat-undeploy context="${webtest.context}" />
  </target>
  
  <target name="webtest-jmeter-exec">
  	<jmeter-test context="${webtest.context}" />
  </target>
  
	<!-- ============================================================== -->
  
  <!-- Tomcat deployment tasks -->
  
  <!-- These macros deploy and undeploy WAR files to a Tomcat
       server, assumed to be already running on ${tomcat.host} port 
       ${tomcat.port}. The manager app MUST be installed and running in 
       order for this to work properly. Also, the 'tomcat.admin',
       'tomcat.password', 'tomcat.host', 'tomcat.protocol' and 
       'tomcat.port' properties must be set in build.properties.
       To run these macros, calling tasks must have already
       run the task 'tomcat-init'.
  -->
  <macrodef name="tomcat-deploy">
    <attribute name="context" />
    <attribute name="webxml" />
    <attribute name="props" />
    <sequential>
      <!-- We need the tomcat.admin and tomcat.password properties -->
      <check-property prop="tomcat.admin" />
      <check-property prop="tomcat.password" />
      <check-property prop="tomcat.host" />
      <check-property prop="tomcat.port" />
      <check-property prop="tomcat.protocol" />
    
      <!-- Declare the Tomcat deploy task -->
      <taskdef classname="org.apache.catalina.ant.DeployTask" name="deploy">
        <classpath>
          <path refid="tomcat.classpath" /> 
        </classpath> 
      </taskdef>
      
      <!-- Create a context file for Tomcat -->
      <mkdir dir="${tests.build}/@{context}" />
      <copy flatten="true" 
        file="tests/etc/tomcat/context-@{context}.xml"
        toFile="${tests.build}/@{context}/context.xml">
        <filterset>
          <filter token="docBase" 
            value="${tests.build}/@{context}/@{context}.war" />
          <filtersfile file="tests/etc/jspwiki.properties" />
          <filtersfile file="build.properties" />
        </filterset>
      </copy>
           
      <!-- Create a page/log directory and point jspwiki.properties to it -->
      <mkdir dir="${tests.build}/@{context}/wikipages" />
      <copy toDir="${tests.build}/@{context}/wikipages" flatten="true" >
        <fileset dir="src/wikipages">
          <include name="Main.*" />
          <include name="LeftMenu*.*" />
          <include name="About.*" />
          <include name="RecentChanges.*" />
          <include name="WikiEtiquette.*" />
          <include name="UnusedPages.*" />
          <include name="UndefinedPages.*" />
          <include name="PageIndex.*" />
        </fileset>
      </copy>
      <copy file="@{props}" toFile="${tests.build}/@{context}/jspwiki.properties" flatten="true" />
      <propertyfile file="${tests.build}/@{context}/jspwiki.properties">
        <entry key="jspwiki.fileSystemProvider.pageDir" 
             value="${basedir}/${tests.build}/@{context}/wikipages" />
        <entry key="jspwiki.basicAttachmentProvider.storageDir" 
             value="${basedir}/${tests.build}/@{context}/wikipages" />
        <entry key="log4j.appender.FileLog.File" 
             value="${basedir}/${tests.build}/@{context}/jspwiki.log" />
      </propertyfile>
      
      <!-- Copy our sample user database -->
      <copy file="tests/etc/userdatabase.xml"
          toFile="${tests.build}/@{context}/userdatabase.xml" />
      
      <!-- Build the war -->
      <war warfile="${tests.build}/@{context}/@{context}.war"
           webxml="@{webxml}">
         <lib dir="lib" includes="*.jar"
           excludes="servlet.jar,junit.jar,servlet-api.jar,jsp-api.jar,hsqldb.jar,httpunit*.jar,jwebunit*.jar,ant-jmeter*.jar"/>
         <lib file="${jarfile}" />
         <lib file="${jdbc.driver.jar}" />
         <fileset dir="${code.src}/webdocs" includes="**" />
         <webinf dir="etc" 
           includes="**" 
           excludes="jspwiki.properties userdatabase.xml db/** **.tmpl web.xml" />
         <webinf dir="${tests.build}/@{context}" 
           includes="jspwiki.properties userdatabase.xml" />
         <classes dir="etc" includes="oscache.properties" />
         <metainf dir="${tests.build}/@{context}" includes="context.xml" />
      </war>
      
      <!-- Deploy the webapp -->
      <deploy url="${tomcat.protocol}://${tomcat.host}:${tomcat.port}/manager" 
        username="${tomcat.admin}" password="${tomcat.password}"
        path="/@{context}" failonerror="false"
        war="file:///${basedir}/${tests.build}/@{context}/@{context}.war" />
    </sequential>
  </macrodef>
 
  <macrodef name="tomcat-undeploy">
    <attribute name="context" />
    <sequential>
      <!-- We need the tomcat.admin and tomcat.password properties -->
      <check-property prop="tomcat.admin" />
      <check-property prop="tomcat.password" />
      <check-property prop="tomcat.host" />
      <check-property prop="tomcat.port" />
      <check-property prop="tomcat.protocol" />
    	
      <!-- Declare the Tomcat deploy task -->
      <taskdef classname="org.apache.catalina.ant.UndeployTask" name="undeploy">
        <classpath>
          <path refid="tomcat.classpath" /> 
        </classpath> 
      </taskdef>
      
      <!-- Undeploy the webapp -->
      <undeploy url="${tomcat.protocol}://${tomcat.host}:${tomcat.port}/manager" 
        username="${tomcat.admin}" password="${tomcat.password}"
        path="/@{context}" failonerror="false" />
    </sequential>
  </macrodef>
	
	<!-- ============================================================== -->
  
  <!-- JMeter execution test task -->
	
  <!-- This macro executes the JMeter test plan located on 
  	   com/ecyrd/jspwiki/web/jmeter-tests.jmx. It expects your favourite
  	   server up & running on ${tomcat.protocol}://${tomcat.host}:${tomcat.port} 
  	   For this reason, these properties must be set up in your 
  	   build.properties file. Also, it is needed to set up in 
  	   this file the 'jmeter.home' property.
  -->
	
  <macrodef name="jmeter-test">
  	<attribute name="context"/>
  	<sequential>
  		<!-- We need the tomcat.host, tomcat.port, tomcat.protocol and 
  			 jmeter.home properties -->
  		<check-property prop="tomcat.host" />
  		<check-property prop="tomcat.port" />
  		<check-property prop="tomcat.protocol" />
  		<check-property prop="@jmeter.home@" />
  		
  		<!-- Declare the JMeter execution test Task -->
  		<taskdef classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" name="jmeter">
  			<classpath>
  		  		<path>
  		  			<pathelement location="lib/ant-jmeter_2.3.jar"/>
  		  		</path>
  		  	</classpath>
  		</taskdef>
  		  	
  		<!-- Delete previous results file -->
  		<delete file="${tests.reports}/JMeterResults_@{context}.jtl"/>
  		
  		<!-- Execute JMeter Test Plan -->
  		<jmeter jmeterhome="${@jmeter.home@}" resultlog="${tests.reports}/JMeterResults_@{context}.jtl">
  		  	<testplans dir="${tests.src}" includes="com/ecyrd/jspwiki/web/jmeter-tests.jmx" />
  		  	<property name="jmeter.save.saveservice.output_format" value="xml"/> <!-- Allow pretty printing -->
  		  	<property name="jmeter.save.saveservice.assertion_results" value="all"/>
  		  	<property name="test.host" value="${tomcat.host}"/>
  		  	<property name="test.port" value="${tomcat.port}"/>
  			<property name="test.protocol" value="${tomcat.protocol}"/>
  		  	<property name="test.context.path" value="@{context}"/>
  		</jmeter>
  		
  		<!-- Convert the results file to a nice reading HTML document -->
  		<xslt style="${tests.src}/etc/jmeter/jmeter-results-report_21.xsl"
  		  	in="${tests.reports}/JMeterResults_@{context}.jtl"
  		  	out="${tests.reports}/JMeterResultsReport_@{context}.html" />
  		  	
  		<xslt style="${tests.src}/etc/jmeter/jmeter-results-detail-report_21.xsl"
  		  	in="${tests.reports}/JMeterResults_@{context}.jtl" 
  		  	out="${tests.reports}/JMeterResultsDetailReport_@{context}.html" />
  		
  		<echo message="Tests results for @{context} are available at: "/>
  		<echo message="--> ${tests.reports}/JMeterResultsReport_@{context}.html" />
  		<echo message="--> ${tests.reports}/JMeterResultsDetailReport_@{context}.html" />
  	</sequential>
  </macrodef>
  
</project>